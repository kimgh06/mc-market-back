// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package schema

import (
	"context"
)

const createArticleLike = `-- name: CreateArticleLike :exec
insert into articles_likes (article_id, user_id, kind)
values ($1, $2, $3)
`

type CreateArticleLikeParams struct {
	ArticleID uint64 `json:"article_id"`
	UserID    uint64 `json:"user_id"`
	Kind      bool   `json:"kind"`
}

func (q *Queries) CreateArticleLike(ctx context.Context, arg CreateArticleLikeParams) error {
	_, err := q.db.ExecContext(ctx, createArticleLike,
		arg.ArticleID,
		arg.UserID,
		arg.Kind,
	)
	return err
}

const deleteArticleLike = `-- name: DeleteArticleLike :exec
delete from articles_likes
where article_id = $1 and user_id = $2
`

type DeleteArticleLikeParams struct {
	ArticleID uint64 `json:"article_id"`
	UserID    uint64 `json:"user_id"`
}

func (q *Queries) DeleteArticleLike(ctx context.Context, arg DeleteArticleLikeParams) error {
	_, err := q.db.ExecContext(ctx, deleteArticleLike, arg.ArticleID, arg.UserID)
	return err
}

const getArticleLikesCount = `-- name: GetArticleLikesCount :one
select count(*) as likes
from articles_likes
where article_id = $1 and kind = true
`

const getArticleDislikesCount = `-- name: GetArticleDislikesCount :one
select count(*) as dislikes
from articles_likes
where article_id = $1 and kind = false
`

type GetArticleLikesCountParams struct {
	ArticleID uint `json:"article_id"`
}

func (q *Queries) GetArticleLikesAndDisLikesCount(ctx context.Context, arg GetArticleLikesCountParams) (int64, int64, error) {
	row := q.db.QueryRowContext(ctx, getArticleLikesCount, arg.ArticleID)
	var likes int64
	err := row.Scan(&likes)
	if err != nil {
		return 0, 0, err
	}

	row = q.db.QueryRowContext(ctx, getArticleDislikesCount, arg.ArticleID)
	var dislikes int64
	err = row.Scan(&dislikes)
	if err != nil {
		return 0, 0, err
	}

	return likes, dislikes, nil
}

const getArticleLike = `-- name: GetArticleLike :one
select kind
from articles_likes
where article_id = $1 and user_id = $2
`

type GetArticleLikeParams struct {
	ArticleID uint64 `json:"article_id"`
	UserID    uint64 `json:"user_id"`
}

func (q *Queries) GetArticleLikeById(ctx context.Context, arg GetArticleLikeParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getArticleLike, arg.ArticleID, arg.UserID)
	var kind bool
	err := row.Scan(&kind)
	return kind, err
}

const updateArticleLike = `-- name: UpdateArticleLike :exec
update articles_likes
set kind = $3
where article_id = $1 and user_id = $2
`

type UpdateArticleLikeParams struct {
	ArticleID uint64 `json:"article_id"`
	UserID    uint64 `json:"user_id"`
	Kind      bool   `json:"kind"`
}

func (q *Queries) UpdateArticleLike(ctx context.Context, arg UpdateArticleLikeParams) error {
	_, err := q.db.ExecContext(ctx, updateArticleLike, arg.ArticleID, arg.UserID, arg.Kind)
	return err
}

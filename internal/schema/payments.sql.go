// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payments.sql

package schema

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const approvePayment = `-- name: ApprovePayment :one
update payments
set approved = true
where id = $1
returning id, agent, order_id, amount, approved, created_at, failed
`

func (q *Queries) ApprovePayment(ctx context.Context, id int64) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, approvePayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Agent,
		&i.OrderID,
		&i.Amount,
		&i.Approved,
		&i.CreatedAt,
		&i.Failed,
	)
	return &i, err
}

const createPayment = `-- name: CreatePayment :one
insert into payments (id, agent, order_id, amount)
values ($1, $2, $3, $4)
returning id, agent, order_id, amount, approved, created_at, failed
`

type CreatePaymentParams struct {
	ID      int64     `json:"id"`
	Agent   int64     `json:"agent"`
	OrderID uuid.UUID `json:"order_id"`
	Amount  int32     `json:"amount"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.ID,
		arg.Agent,
		arg.OrderID,
		arg.Amount,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Agent,
		&i.OrderID,
		&i.Amount,
		&i.Approved,
		&i.CreatedAt,
		&i.Failed,
	)
	return &i, err
}

const deletePayment = `-- name: DeletePayment :exec
delete
from payments
where id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getPayment = `-- name: GetPayment :one
select id, agent, order_id, amount, approved, created_at, failed
from payments
where id = $1
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Agent,
		&i.OrderID,
		&i.Amount,
		&i.Approved,
		&i.CreatedAt,
		&i.Failed,
	)
	return &i, err
}

const getPaymentByOrderId = `-- name: GetPaymentByOrderId :one
select id, agent, order_id, amount, approved, created_at, failed
from payments
where order_id = $1
`

func (q *Queries) GetPaymentByOrderId(ctx context.Context, orderID uuid.UUID) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByOrderId, orderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Agent,
		&i.OrderID,
		&i.Amount,
		&i.Approved,
		&i.CreatedAt,
		&i.Failed,
	)
	return &i, err
}

type PaymentListItem struct {
	Payment
	AgentName sql.NullString `json:"agent_name"`
}

const listPaymentsOrderByCreated = `-- name: ListPaymentsOrderByCreated :many
select id, agent,
(select u.nickname from users u where u.id = agent) as agent_name,
order_id, amount, approved, created_at, failed
from payments
order by created_at desc
`

func (q *Queries) ListPaymentsOrderByCreated(ctx context.Context) ([]PaymentListItem, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentsOrderByCreated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentListItem
	for rows.Next() {
		var i PaymentListItem
		if err := rows.Scan(
			&i.ID,
			&i.Agent,
			&i.AgentName,
			&i.OrderID,
			&i.Amount,
			&i.Approved,
			&i.CreatedAt,
			&i.Failed,
		); err != nil {
			return nil, err
		}
		i.AgentName.String = i.AgentName.String // Ensure the string is set correctly
		items = append(items, i)
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package schema

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
insert into users (id, nickname, created_at, updated_at)
values ($1, $2, $3, $3)
returning id, nickname, permissions, created_at, updated_at
`

type CreateUserParams struct {
	ID        int64          `json:"id"`
	Nickname  sql.NullString `json:"nickname"`
	CreatedAt time.Time      `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Nickname, arg.CreatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserById = `-- name: GetUserById :one
select id, nickname, permissions, created_at, updated_at
from users
where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserByNickname = `-- name: GetUserByNickname :one
select id, nickname, permissions, created_at, updated_at
from users
where nickname = $1
`

func (q *Queries) GetUserByNickname(ctx context.Context, nickname sql.NullString) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByNickname, nickname)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
select id, nickname, permissions, created_at, updated_at
from users
where users.id > $1::int
order by users.created_at desc
limit $2
`

type ListUsersParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.Permissions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

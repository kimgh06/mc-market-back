// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package schema

import (
	"context"
)

const getArticleHeadbyName = `-- name: GetArticleHeadByName :one
select id, name
from article_head_type
where name = $1
`

type GetArticleHeadByNameParams struct {
	Name string `json:"name"`
}

type ArticleHead struct {
	ID   int `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetArticleHeadByName(ctx context.Context, arg GetArticleHeadByNameParams) (ArticleHead, error) {
	row := q.db.QueryRowContext(ctx, getArticleHeadbyName, arg.Name)
	var i ArticleHead
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getArticleHeadList = `-- name: GetArticleHeadList :many
select id, name
from article_head_type
`

func (q *Queries) GetArticleHeadList(ctx context.Context) ([]ArticleHead, error) {
	rows, err := q.db.QueryContext(ctx, getArticleHeadList)
	if err != nil {
		return nil, err
	}

	defer rows.Close()
	var items []ArticleHead
	for rows.Next() {
		var i ArticleHead
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	return items, nil
}

const getArticleHeadbyID = `-- name: GetArticleHeadByID :one
select id, name
from article_head_type
where id = $1
`

type GetArticleHeadByIDParams struct {
	ID int `json:"id"`
}


func (q *Queries) GetArticleHeadByID(ctx context.Context, arg GetArticleHeadByIDParams) (ArticleHead, error) {
	row := q.db.QueryRowContext(ctx, getArticleHeadbyID, arg.ID)
	var i ArticleHead
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createArticleHead = `-- name: CreateArticleHead :exec
insert into article_head_type (id, name)
values ($1, $2)
`

func (q *Queries) CreateArticleHead(ctx context.Context, arg ArticleHead) error {
	// check if the article head already exists 
	row, err := q.db.QueryContext(ctx, getArticleHeadbyName, arg.Name)
	if row.Next() {
		return nil
	}

	_, err = q.db.ExecContext(ctx, createArticleHead,
		arg.ID,
		arg.Name,
	)
	return err
}

const updateArticleHead = `-- name: UpdateArticleHead :exec
update article_head_type
set name = $2
where id = $1
`

func (q *Queries) UpdateArticleHead(ctx context.Context, arg ArticleHead) error {
	_, err := q.db.ExecContext(ctx, updateArticleHead,
		arg.ID,
		arg.Name,
	)
	return err
}

const deleteArticleHead = `-- name: DeleteArticleHead :exec
delete from article_head_type
where id = $1
`

type DeleteArticleHeadParams struct {
	ID int `json:"id"`
}

func (q *Queries) DeleteArticleHead(ctx context.Context, arg DeleteArticleHeadParams) error {
	_, err := q.db.ExecContext(ctx, deleteArticleHead, arg.ID)
	return err
}

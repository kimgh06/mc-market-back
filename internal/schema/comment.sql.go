// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package schema

import (
	"context"
	"database/sql"
	"time"
)

const countComments = `-- name: CountComments :one
select count(*)
from comments
`

func (q *Queries) CountComments(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countComments)
	var count int64
	err := row.Scan(&count)
	return count, err
}

type GetCountFromArticleId struct {
	ArticleID uint64 `json:"article_id"`
}

const countCommentsFromArticleId = `-- name: CountComments :one
select count(*)
from comments
where article_id = $1
`

func (q *Queries) GetCountFromArticleId(ctx context.Context, arg GetCountFromArticleId) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCommentsFromArticleId, arg.ArticleID)
	var count int64
	err := row.Scan(&count)
	return count, err
}


const createComment = `-- name: CreateComment :one
insert into comments (id, article_id, user_id, reply_to, content, created_at, updated_at)
values ($1, $2, $3, $4, $5, $6, $7)
returning id, article_id, user_id, reply_to, content, created_at, updated_at
`

type CreateCommentParams struct {
	ID        int64         `json:"id"`
	ArticleID int64         `json:"article_id"`
	UserID    int64         `json:"user_id"`
	ReplyTo   sql.NullInt64 `json:"reply_to"`
	Content   string        `json:"content"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (*Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.ArticleID,
		arg.UserID,
		arg.ReplyTo,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.ArticleID,
		&i.UserID,
		&i.ReplyTo,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteComment = `-- name: DeleteComment :exec
delete
from comments
where id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const DeleteReplies	= `-- name: DeleteReplies :exec
delete
from comments
where reply_to = $1
`

func (q *Queries) DeleteReplies(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, DeleteReplies, id)
	return err
}

const getComment = `-- name: GetComment :one
select id, article_id, user_id, reply_to, content, created_at, updated_at
from comments
where id = $1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (*Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.ArticleID,
		&i.UserID,
		&i.ReplyTo,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listComments = `-- name: ListComments :many
select id, article_id, user_id, reply_to, content, created_at, updated_at
from comments
where article_id = $1 and reply_to is null
order by created_at desc
limit 30 offset $2
`
const listCommentsWithReplyFrom = `-- name: ListComments :many
select id, article_id, user_id, reply_to, content, created_at, updated_at
from comments
where reply_to = $1
order by created_at desc
`

type ListCommentsParams struct {
	ArticleID uint64 `json:"article_id"`
	PageID    int32 `json:"limit"`
	ReplyFrom *int64 `json:"reply_from"`
}

func (q *Queries) ListComments(ctx context.Context, arg ListCommentsParams) ([]*Comment, error) {
	var rows *sql.Rows
	var err error
	if arg.ReplyFrom != nil {
		rows, err = q.db.QueryContext(ctx, listCommentsWithReplyFrom, arg.ReplyFrom)
	} else {
		rows, err = q.db.QueryContext(ctx, listComments, arg.ArticleID, (arg.PageID - 1) * 30)
	}
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.ArticleID,
			&i.UserID,
			&i.ReplyTo,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

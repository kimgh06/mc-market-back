// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: purchase.sql

package schema

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createPurchase = `-- name: CreatePurchase :one
insert into purchases (id, purchaser, product, cost)
values ($1, $2, $3, $4)
returning id, purchaser, product, purchased_at, claimed, cost
`

type CreatePurchaseParams struct {
	ID        int64 `json:"id"`
	Purchaser int64 `json:"purchaser"`
	Product   int64 `json:"product"`
	Cost      int32 `json:"cost"`
}

func (q *Queries) CreatePurchase(ctx context.Context, arg CreatePurchaseParams) (*Purchase, error) {
	row := q.db.QueryRowContext(ctx, createPurchase,
		arg.ID,
		arg.Purchaser,
		arg.Product,
		arg.Cost,
	)
	var i Purchase
	err := row.Scan(
		&i.ID,
		&i.Purchaser,
		&i.Product,
		&i.PurchasedAt,
		&i.Claimed,
		&i.Cost,
	)
	return &i, err
}

const deletePurchase = `-- name: DeletePurchase :exec
delete
from purchases
where id = $1
`

func (q *Queries) DeletePurchase(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePurchase, id)
	return err
}

const getPurchase = `-- name: GetPurchase :one
select id, purchaser, product, purchased_at, claimed, cost
from purchases
where purchaser = $1
  and product = $2
`

type GetPurchaseParams struct {
	Purchaser int64 `json:"purchaser"`
	Product   int64 `json:"product"`
}

func (q *Queries) GetPurchase(ctx context.Context, arg GetPurchaseParams) (*Purchase, error) {
	row := q.db.QueryRowContext(ctx, getPurchase, arg.Purchaser, arg.Product)
	var i Purchase
	err := row.Scan(
		&i.ID,
		&i.Purchaser,
		&i.Product,
		&i.PurchasedAt,
		&i.Claimed,
		&i.Cost,
	)
	return &i, err
}

const getPurchaseById = `-- name: GetPurchaseById :one
select id, purchaser, product, purchased_at, claimed, cost
from purchases
where id = $1
`

func (q *Queries) GetPurchaseById(ctx context.Context, id int64) (*Purchase, error) {
	row := q.db.QueryRowContext(ctx, getPurchaseById, id)
	var i Purchase
	err := row.Scan(
		&i.ID,
		&i.Purchaser,
		&i.Product,
		&i.PurchasedAt,
		&i.Claimed,
		&i.Cost,
	)
	return &i, err
}

const getUnclaimedPurchasesOfUser = `-- name: GetUnclaimedPurchasesOfUser :many
select purchases.cost, purchases.purchased_at, p.id, p.creator, p.category, p.name, p.description, p.usage, p.price, p.price_discount, p.ts, p.created_at, p.updated_at, p.details, p.tags
from purchases
         left join public.products p on p.id = purchases.product
         left join public.users u on u.id = p.creator
where u.id = $1
  and claimed = false
`

type GetUnclaimedPurchasesOfUserRow struct {
	Cost        int32     `json:"cost"`
	PurchasedAt time.Time `json:"purchased_at"`
	Product     Product   `json:"product"`
}

func (q *Queries) GetUnclaimedPurchasesOfUser(ctx context.Context, id int64) ([]*GetUnclaimedPurchasesOfUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnclaimedPurchasesOfUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUnclaimedPurchasesOfUserRow
	for rows.Next() {
		var i GetUnclaimedPurchasesOfUserRow
		if err := rows.Scan(
			&i.Cost,
			&i.PurchasedAt,
			&i.Product.ID,
			&i.Product.Creator,
			&i.Product.Category,
			&i.Product.Name,
			&i.Product.Description,
			&i.Product.Usage,
			&i.Product.Price,
			&i.Product.PriceDiscount,
			&i.Product.Ts,
			&i.Product.CreatedAt,
			&i.Product.UpdatedAt,
			&i.Product.Details,
			pq.Array(&i.Product.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnclaimedRevenuesOfProduct = `-- name: GetUnclaimedRevenuesOfProduct :one
select coalesce(sum(purchases.cost), 0)
from purchases
where product = $1
`

func (q *Queries) GetUnclaimedRevenuesOfProduct(ctx context.Context, product int64) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getUnclaimedRevenuesOfProduct, product)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const getUnclaimedRevenuesOfUser = `-- name: GetUnclaimedRevenuesOfUser :one
select coalesce(sum(purchases.cost), 0), count(purchases)
from purchases
         left join public.products p on p.id = purchases.product
         left join public.users u on u.id = p.creator
where u.id = $1
`

type GetUnclaimedRevenuesOfUserRow struct {
	Coalesce interface{} `json:"coalesce"`
	Count    int64       `json:"count"`
}

func (q *Queries) GetUnclaimedRevenuesOfUser(ctx context.Context, id int64) (*GetUnclaimedRevenuesOfUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUnclaimedRevenuesOfUser, id)
	var i GetUnclaimedRevenuesOfUserRow
	err := row.Scan(&i.Coalesce, &i.Count)
	return &i, err
}

const listProductPurchases = `-- name: ListProductPurchases :many
select id, purchaser, product, purchased_at, claimed, cost
from purchases
where product = $1
`

func (q *Queries) ListProductPurchases(ctx context.Context, product int64) ([]*Purchase, error) {
	rows, err := q.db.QueryContext(ctx, listProductPurchases, product)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Purchase
	for rows.Next() {
		var i Purchase
		if err := rows.Scan(
			&i.ID,
			&i.Purchaser,
			&i.Product,
			&i.PurchasedAt,
			&i.Claimed,
			&i.Cost,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserPurchases = `-- name: ListUserPurchases :many
select id, purchaser, product, purchased_at, claimed, cost
from purchases
where purchaser = $1
`

func (q *Queries) ListUserPurchases(ctx context.Context, purchaser int64) ([]*Purchase, error) {
	rows, err := q.db.QueryContext(ctx, listUserPurchases, purchaser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Purchase
	for rows.Next() {
		var i Purchase
		if err := rows.Scan(
			&i.ID,
			&i.Purchaser,
			&i.Product,
			&i.PurchasedAt,
			&i.Claimed,
			&i.Cost,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
